Passing Arrays to functions:

Arrays are passed by reference (WHY?)
	if copy, need to specify size!
name of array is address in memory of 1st element
need to pass size to, unlike java
Use const t make sure function can not change array
	void cannotModifyArray(const in b[], int size);
	const is like saying array is read only


f(){
	int x;
}

bFunc

main(){
	int a[] = {1,2};

	int b[2][3] = {{1,2, 3} {4, 5,6}};

	int **b = new *int[10];

	for(int i = 0; i < 10; ++i){
		b[i] = new int[10];
	}

	bFunc(b);
}



Reference vs Pointers
	Both point to memory addresses
	references are more similar to an alias

arrays as pointers
	int myArray[10] = {};

	myArray is a constant pointer to the first element of the array
		myArray === &myArray[0]
	void changeArray(int[]) === void changeArray(int*)
	sizeof return the number of elements * type of element (not like a pointer)